import sys
from os import path
import platform

# 信息属性 class
class Info:
    machine = platform.machine().lower()
    system = platform.system().lower()

env = Environment()
info = Info()

# 平台和编译器配置
if info.system == "darwin":
    env["CC"] = "clang"
    if info.machine == "arm64":
        env.Append(CCFLAGS=["-target", "arm64-apple-macos11"])
    else:
        env.Append(CCFLAGS=["-target", "x86_64-apple-macos10.15"])
elif info.system == "windows":
    env["CC"] = "cl"
    if "arm" in info.machine:
        env.Append(CCFLAGS=["/arch:ARM64"])
    else:
        env.Append(CCFLAGS=["/arch:x64"])
elif info.system == "linux":
    env["CC"] = "gcc"
    if "arm" in info.machine or "aarch64" in info.machine:
        env.Append(CCFLAGS=["-march=armv8-a"])
    else:
        env.Append(CCFLAGS=["-m64"])

#
#
#

# 从命令行参数获取编译阶段，默认 all
stage = ARGUMENTS.get("stage", "all").lower()

# 编译 OpenSSL
if stage in ("openssl", "all"):
    SConscript("third_party/openssl/SConscript", exports=["env", "info"])

# 编译 SQLCipher（依赖 OpenSSL）
if stage in ("sqlcipher", "all"):
    SConscript("third_party/sqlcipher/SConscript", exports=["env", "info"])

# 编译 GDExtension（依赖 SQLCipher + OpenSSL）
if stage in ("gdextension", "all"):

    sources = Glob("src/*.c")
    # 添加头文件路径
    env.Append(CPPPATH=[
        "third_party/openssl/include",
        "third_party/sqlcipher/include",
        "src/"
    ])

    # 添加宏定义给编译器
    env.Append(CPPDEFINES=[
        "SQLITE_HAS_CODEC",
        "SQLITE_TEMP_STORE=2",
        "SQLITE_EXTRA_INIT=sqlcipher_extra_init",
        "SQLITE_EXTRA_SHUTDOWN=sqlcipher_extra_shutdown",
    ])

    # 添加库目录（不含文件名）
    env.Append(LIBPATH=[
        "third_party/sqlcipher/lib",
        "third_party/openssl/lib",
    ])

    # 添加要链接的静态库文件名或动态库名
    # 如果是静态库文件，写完整文件名；如果是系统库，写-l形式
    env.Append(LIBS=[
        "libsqlite3.a",   # 也可以直接写完整路径，或改成静态库变量
        "libssl.a",
        "libcrypto.a",
        "dl",
        "pthread",
        "z",
    ])

    

    if info.system == "darwin":
        if info.machine == "arm64":
            env.Append(CCFLAGS=["-target", "arm64-apple-macos11"])

        # 动态库（分散依赖）
        share_lib = env.SharedLibrary(
            target="bin/_arm_gd.dylib",
            source=sources,
            LIBS=env.get("LIBS", []),
            LIBPATH=env.get("LIBPATH", [])
        )

        # # 静态库（合并依赖）
        # static_lib = env.Command(
        #     target="bin/_arm_gd.a",
        #     source=sources + [
        #         "third_party/sqlcipher/lib/libsqlite3.a",
        #         "third_party/openssl/lib/libssl.a",
        #         "third_party/openssl/lib/libcrypto.a",
        #     ],
        #     action="libtool -static -o $TARGET $SOURCES"
        # )

    Default([share_lib])